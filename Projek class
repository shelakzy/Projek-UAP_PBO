var chara, mon, mapp, level; // membuat variabel baru
let layar = 0;
let score = 0;
let counter = setInterval(timer, 1000) // Membuat fungsi Timer menggunakan setInteval

function setup(){
    chara = new Hero(300,500, 30,30); // Menginisialisasi class Hero
    mon = new Monster(random(0,600), random(0, 300), 50,50); // Menginisialisasi class Monster
    mapp = new Map(600,600); // Menginisialisasi class Map
    level = new Level(1,0,100); // Menginisialisasi class Level

    level.setLevel(1);
    mapp.init(); // Memanggil fungsi init untuk membuat canvas
}

function draw(){
    if(layar === 0){ // Jika Layar 1
        background(220);
        fill(0);
        text('Click to Start!', (width/2) - 70, height/2 );
        chara.life = 15; // Mengatur Nyawa Awal Hero

    }else if(layar === 1){ // Jika Layar 2
        background(220);
        chara.show(); // Memanggil Hero

        for(let plr of chara.bullet){ // Looping untuk Peluru
            plr.show();
        }

        mon.show(); // Memanggil fungsi Monster
        fill('#000');
        text(`Score: ${score}`, 500, 40); // Mendapatkan Jumlah Score
        text(`Level: ${level.getCurrentLevel()}`, 500, 60); // Mendapatkan Jumlah Level

        if(chara.life > 0){ // Set Timer nyawa Tersisa
            fill('#000')
            text(chara.life + " seconds", 100, 40);
        } else { // Jika Nyawa Habis, maka Game Over
            layar = 2;
            chara.life = 15;
        }

        if (keyIsDown(87)) { // 87 == W
            chara.moveUp();
        
        }else if (keyIsDown(83)) { // 83 == s
            chara.moveDown();
        
        }else if (keyIsDown(65)) { // 65 == A
            chara.moveLeft();
        
        }else if (keyIsDown(68)) { // 68 == D
            chara.moveRight();
        }
    }else{ // Jika Layar 2
        background(220);
        textSize(20);
        text('Game Over', width/2 - 50, height/2);
        textSize(16);
        text(`Your Score: ${score}`, width/2 - 50, height/2 + 20);
        text(`Your Level: ${level.getCurrentLevel()}`, width/2 - 50, height/2 + 40);
        text(`Click To Continue!`, width/2 - 50, height/2 + 60);
    }
}

function mousePressed(){
	if(layar == 0){//layar awal > jika diklik akan berubah jadi 1
        layar = 1
        level.setLevel(1);
        mapp.init();
    }else if(layar == 2){ // jika diklik akan berubah jadi layar 0
        layar = 0 // Mereset semua menjadi awal 0
        score = 0;
        chara.life = 15;
        level.setLevel(1);
    }
}

function keyPressed() {
    if (keyCode === 32) { // fungsi menekan Spasi Untuk menembak peluru
      chara.attack();
    } 
}

function timer(){ // Fungsi Timer
    if (chara.life <= 0) {
       clearInterval(counter);     
    } else {
       chara.life = chara.life - 1;
    }
}

class Entity{ // CLass Entity
    constructor(x, y, width, height){
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.bullet = [];
    }

attack(){ // fungsi attack untuk menembak Peluru
        let blt = new Bullet(chara.x, chara.y)
        this.bullet.push(blt);
    }

    moveRight(){ // Bergerak Kekanan. x ditambah
        if(this.x < 600){    
          this.x += 3;
        }
    }
    
    moveLeft(){ // Bergerak Kekanan. x dikurang
        if(this.x > 0){
          this.x -= 3;
        }
    }
    
    moveDown(){ // Bergerak Kekanan. y ditambah
        if(this.y < 600){
          this.y += 3;
        }
    }
    
    moveUp(){ // Bergerak Kekanan. y dikurang
        if(this.y > 0){
          this.y -= 3;
        }
    }
}

class Hero extends Entity{ // class Hero extend Entity
    constructor(x, y, width, height){
        super(x, y, width, height);
        this.life = 15; // Nyawa Hero awal 15
    }
    
 
    show(){ // fungsi untuk menampilkan bentuk Hero
        fill('#ff0');
        ellipse(this.x, this.y, this.width, this.height);
        noFill();
    }

    increaseScore(){ // Fungsi Meningkatkan score
        score++;
    }
}


class Monster extends Entity{ // class Monster extend Entity
    constructor(x, y, width, height){
        super(x, y, width, height);
        this.color = (random(0,255),random(0,255),random(0,255)); // random warna monster
        this.life = 0;
        this.effect = 0;
    }

    show(){ // Memanggil Bentuk Monster
        for(var bllt of chara.bullet){
            var distToBall = dist(this.x, this.y, bllt.x, bllt.y); // Perintah jika posisi x dan y peluru dan posisi monster kurang dari 20
            if(distToBall < 20){ 
                this.x = random(width); // me random ulang posisi x monster
                this.y= random(0, 300); // me random ulang posisi y monster
                this.color = (random(0,255),random(0,255),random(0,255)); // merandom warna monster
                chara.life = 15; // Mengembalikan nyawa hero ke 15
                chara.increaseScore(); // meningkatkan Score
                this.width -= 3; // Mengurangi ukuran monster
                this.height -= 3; // mengurangi ukuran monster

                if(score % 5 == 0){ // Jika score habis dibagi 5 maka level akan naik
                    level.levelIncreaseLevel();
                }

                if(this.width <= 5 && this.height <= 5){ // jika ukuran monster kurang dari 5 maka kembali ke bentuk awal yaitu 50
                    this.width = 50;
                    this.height = 50;
                }
            }
        }
        fill(this.color); // Mewarnai Monster
        ellipse(this.x, this.y, this.width, this.height); // Memanggil Monster
    }
}

class Map{ // class Map
    constructor(width, height){
        this.width = width;
        this.height = height;
    }

    init(){ // Fungsi Inisialisasi untuk memanggil Bentuk Canvas
        createCanvas(this.width, this.height)
    }
}

class Level{ // class Level
    constructor(currentLevel, latestLevel, maxLevel){
        this.currentLevel = currentLevel;
        this.latestLevel = latestLevel;
        this.maxLevel = maxLevel;
    }

    setLevel(level){ // fungsi mengatur level
        this.currentLevel = level; // currentlevel == 1
    }

    getCurrentLevel(){ // fungsi mendapatkan level
        return this.currentLevel;
    }

    levelIncreaseLevel(){ // fungsi meningkatkan level
        this.currentLevel++;
    }

}

class Bullet{ // class Peluru
    constructor(x, y){
        this.x = x;
        this.y = y;
    }

    show(){ // Memanggil bentuk peluru
        fill('#000');
        ellipse(this.x, this.y, 5,  5);
        this.y -= 5;
        noFill();
    }
}

